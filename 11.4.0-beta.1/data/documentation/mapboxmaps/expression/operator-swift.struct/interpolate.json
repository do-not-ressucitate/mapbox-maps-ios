{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"interpolate","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Expression","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV"},{"text":".","kind":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct","text":"Operator","kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV"}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Interpolation types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[\"linear\"]"},{"type":"text","text":": Interpolates linearly between the pair of stops just less than and just greater than the input."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"[\"exponential\", base]"},{"type":"text","text":": Interpolates exponentially between the stops just less than and just greater than the input. "},{"type":"codeVoice","code":"base"},{"type":"text","text":" controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"[\"cubic-bezier\", x1, y1, x2, y2]","type":"codeVoice"},{"text":": Interpolates using the cubic bezier curve defined by the given control points.","type":"text"}],"type":"paragraph"}]}]}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/MapboxMaps\/documentation\/MapboxMaps","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"interpolate","roleHeading":"Type Property","modules":[{"name":"MapboxMaps"}],"externalID":"s:10MapboxMaps10ExpressionV8OperatorV11interpolateAEvpZ","symbolKind":"property","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"interpolate"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV","text":"Operator"}]},"abstract":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The ","type":"text"},{"code":"input","type":"codeVoice"},{"text":" may be any numeric expression (e.g., ","type":"text"},{"code":"[\"get\", \"population\"]","type":"codeVoice"},{"type":"text","text":"). Stop inputs must be numeric literals in strictly ascending order. The output type must be "},{"type":"codeVoice","code":"number"},{"type":"text","text":", "},{"type":"codeVoice","code":"array<number>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"color"},{"type":"text","text":"."}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct\/interpolate"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mapboxmaps\/expression\/operator-swift.struct\/interpolate"]}],"references":{"doc://MapboxMaps/documentation/MapboxMaps/Expression/Operator-swift.struct":{"role":"symbol","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Operator","kind":"identifier"}],"type":"topic","url":"\/documentation\/mapboxmaps\/expression\/operator-swift.struct","title":"Expression.Operator","navigatorTitle":[{"text":"Operator","kind":"identifier"}],"abstract":[]},"doc://MapboxMaps/documentation/MapboxMaps/Expressions":{"title":"Expressions","abstract":[],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","url":"\/documentation\/mapboxmaps\/expressions","type":"topic"},"doc://MapboxMaps/documentation/MapboxMaps/Expression/Operator-swift.struct/interpolate":{"kind":"symbol","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct\/interpolate","url":"\/documentation\/mapboxmaps\/expression\/operator-swift.struct\/interpolate","abstract":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The ","type":"text"},{"code":"input","type":"codeVoice"},{"type":"text","text":" may be any numeric expression (e.g., "},{"code":"[\"get\", \"population\"]","type":"codeVoice"},{"text":"). Stop inputs must be numeric literals in strictly ascending order. The output type must be ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":", "},{"type":"codeVoice","code":"array<number>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"color"},{"text":".","type":"text"}],"type":"topic","title":"interpolate","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"interpolate","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV","text":"Operator"}]},"doc://MapboxMaps/documentation/MapboxMaps/Expression":{"title":"Expression","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Expression","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Expression"}],"url":"\/documentation\/mapboxmaps\/expression","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","isActive":true},{"type":"text","text":" defines a formula for computing the value of any layout property, paint property,"},{"text":" ","type":"text"},{"type":"text","text":"or filter within a map style. Expressions allow you to style data with multiple feature"},{"text":" ","type":"text"},{"type":"text","text":"properties at once, apply conditional logic, and manipulate data with mathematical, logical, and"},{"type":"text","text":" "},{"text":"string operators. This allows for sophisticated runtime styling.","type":"text"}],"type":"topic"},"doc://MapboxMaps/documentation/MapboxMaps":{"kind":"symbol","url":"\/documentation\/mapboxmaps","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps","type":"topic","role":"collection","abstract":[{"text":"Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal.","type":"text"}],"title":"MapboxMaps"}}}