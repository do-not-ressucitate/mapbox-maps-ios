{"sections":[],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/MapboxMaps\/documentation\/MapboxMaps","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"gt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Expression","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV"},{"text":".","kind":"text"},{"text":"Operator","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV","kind":"typeIdentifier","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct"}],"languages":["swift"],"platforms":["iOS"]}],"kind":"declarations"}],"identifier":{"url":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct\/gt","interfaceLanguage":"swift"},"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"gt","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV"},{"text":".","kind":"text"},{"text":"Operator","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Type Property","symbolKind":"property","modules":[{"name":"MapboxMaps"}],"externalID":"s:10MapboxMaps10ExpressionV8OperatorV2gtAEvpZ","title":"gt"},"variants":[{"paths":["\/documentation\/mapboxmaps\/expression\/operator-swift.struct\/gt"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"text":" if the first input is strictly greater than the second, ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional ","type":"text"},{"type":"codeVoice","code":"collator"},{"type":"text","text":" argument to control locale-dependent string comparisons."}],"references":{"doc://MapboxMaps/documentation/MapboxMaps/Expression":{"url":"\/documentation\/mapboxmaps\/expression","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Expression","kind":"identifier"}],"navigatorTitle":[{"text":"Expression","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression","abstract":[{"text":"An ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression"},{"text":" defines a formula for computing the value of any layout property, paint property,","type":"text"},{"type":"text","text":" "},{"text":"or filter within a map style. Expressions allow you to style data with multiple feature","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties at once, apply conditional logic, and manipulate data with mathematical, logical, and"},{"text":" ","type":"text"},{"text":"string operators. This allows for sophisticated runtime styling.","type":"text"}],"kind":"symbol","title":"Expression","role":"symbol"},"doc://MapboxMaps/documentation/MapboxMaps":{"type":"topic","abstract":[{"type":"text","text":"Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal."}],"role":"collection","title":"MapboxMaps","kind":"symbol","url":"\/documentation\/mapboxmaps","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps"},"doc://MapboxMaps/documentation/MapboxMaps/Expression/Operator-swift.struct/gt":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"gt"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Expression","preciseIdentifier":"s:10MapboxMaps10ExpressionV"},{"text":".","kind":"text"},{"text":"Operator","preciseIdentifier":"s:10MapboxMaps10ExpressionV8OperatorV","kind":"typeIdentifier"}],"url":"\/documentation\/mapboxmaps\/expression\/operator-swift.struct\/gt","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct\/gt","title":"gt","type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the first input is strictly greater than the second, "},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional "},{"type":"codeVoice","code":"collator"},{"type":"text","text":" argument to control locale-dependent string comparisons."}]},"doc://MapboxMaps/documentation/MapboxMaps/Expressions":{"url":"\/documentation\/mapboxmaps\/expressions","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","title":"Expressions"},"doc://MapboxMaps/documentation/MapboxMaps/Expression/Operator-swift.struct":{"url":"\/documentation\/mapboxmaps\/expression\/operator-swift.struct","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Operator"}],"navigatorTitle":[{"text":"Operator","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expression\/Operator-swift.struct","abstract":[],"kind":"symbol","title":"Expression.Operator","role":"symbol"}}}