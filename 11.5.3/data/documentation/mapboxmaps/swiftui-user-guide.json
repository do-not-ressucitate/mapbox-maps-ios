{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"MapboxMaps"}],"title":"SwiftUI User Guide"},"abstract":[{"text":"Use Mapbox Maps in SwiftUI applications.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/SwiftUI-User-Guide","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Starting from version "},{"code":"11.0.0-beta.2","type":"codeVoice"},{"type":"text","text":" of MapboxMaps you can easily integrate Mapbox into your apps using the SwiftUI framework."}],"type":"paragraph"},{"inlineContent":[{"text":"You can find working ","type":"text"},{"identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples\/Examples\/SwiftUI%20Examples","type":"reference","isActive":true},{"type":"text","text":" in the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples"},{"type":"text","text":" application."}],"type":"paragraph"},{"name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"SwiftUI support is experimental, the API may change in future releases.","type":"text"}]}],"style":"important"},{"type":"heading","level":3,"text":"Feature support","anchor":"Feature-support"},{"type":"paragraph","inlineContent":[{"text":"The SwiftUI ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map"},{"type":"text","text":" is built on top of the existing "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapView","isActive":true},{"type":"text","text":", which brings the full power of Mapbox Maps SDK to the SwiftUI applications."}]},{"inlineContent":[{"text":"However, not every single API is exposed in SwiftUI, you can track the progress in the table below.","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Feature"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Status","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Note"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Viewport"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"âœ…"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"text":"View Annotations","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"âœ…"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[]}]],[[{"inlineContent":[{"type":"text","text":"Layer Annotations"}],"type":"paragraph"}],[{"inlineContent":[{"text":"âœ…","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"isDraggable"},{"type":"text","text":", "},{"type":"codeVoice","code":"isSelected"},{"text":" are not supported","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"Annotations Clustering","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ…"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"inlineContent":[{"type":"text","text":"View Annotations"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"âœ…"}],"type":"paragraph"}],[{"inlineContent":[],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Puck 2D\/3D"}]}],[{"type":"paragraph","inlineContent":[{"text":"âœ…","type":"text"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"inlineContent":[{"text":"Map Events","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"âœ…","type":"text"}]}],[{"inlineContent":[],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Gesture Configuration"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ…"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ornaments Configuration"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"âœ…"}]}],[{"inlineContent":[],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Style API"}]}],[{"inlineContent":[{"type":"text","text":"âœ…"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[]}]],[[{"inlineContent":[{"type":"text","text":"Custom Camera Animations"}],"type":"paragraph"}],[{"inlineContent":[{"text":"ðŸš§","type":"text"}],"type":"paragraph"}],[{"inlineContent":[],"type":"paragraph"}]]]},{"anchor":"Getting-started","level":3,"text":"Getting started","type":"heading"},{"inlineContent":[{"type":"text","text":"To start using Mapbox Map in SwiftUI you need to import "},{"code":"SwiftUI","type":"codeVoice"},{"text":" and  ","type":"text"},{"type":"codeVoice","code":"MapboxMaps"},{"type":"text","text":" with "},{"type":"codeVoice","code":"@_spi(Experimental)"},{"type":"text","text":". This way you can try the new APIs that have experimental support."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","@_spi(Experimental) import MapboxMaps"]},{"type":"paragraph","inlineContent":[{"text":"Then you can use ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map","isActive":true,"type":"reference"},{"type":"text","text":" to display map content."}]},{"type":"codeListing","code":["struct ContentView: View {","    init() {","        MapboxOptions.accessToken = \"pk...\"","    }","    var body: some View {","        Map()","          .ignoresSafeArea()","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Please note, that you have to set the Mapbox Access Token at any time before using the "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map","isActive":true,"type":"reference"},{"text":". You can do it either by setting ","type":"text"},{"code":"MapboxOptions.accessToken","type":"codeVoice"},{"type":"text","text":" or any option listed in "},{"isActive":true,"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Migrate-to-v11#26-Access-Token-and-Map-Options-management","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Tutorials","text":"Tutorials","level":2},{"type":"heading","text":"Setting Map style","anchor":"Setting-Map-style","level":3},{"inlineContent":[{"type":"text","text":"By default the map uses the new "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyle\/standard","type":"reference","isActive":true},{"text":" style which brings rich 3D visualization. But you can use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map\/mapStyle(_:)","isActive":true},{"type":"text","text":" to set any other style."}],"type":"paragraph"},{"syntax":"swift","code":["Map()","  .mapStyle(.streets) \/\/ Sets Mapbox Streets Style."],"type":"codeListing"},{"inlineContent":[{"text":"With the Standard style you can set the lightPresets of the style according to your applicationâ€™s ","type":"text"},{"type":"codeVoice","code":"colorScheme"},{"text":". Light presents are 4 time-of-day states (","type":"text"},{"code":"dawn","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"day"},{"text":", ","type":"text"},{"code":"dusk","type":"codeVoice"},{"type":"text","text":", "},{"code":"night","type":"codeVoice"},{"type":"text","text":") that set the lighting and shadows of the map to represent changes in daylight."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @Environment(\\.colorScheme) var colorScheme","    var body: some View {","        Map()","            .mapStyle(.standard(lightPreset: colorScheme == .light ? .day : .dusk))","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Also, you always can use your custom Mapbox Styles built with ","type":"text"},{"type":"reference","identifier":"https:\/\/studio.mapbox.com\/","isActive":true},{"text":".","type":"text"}]},{"code":["Map()","    .mapStyle(.myCustomStyle)","","extension MapStyle {","  static let myCustomStyle = MapStyle(uri: StyleURI(rawValue: \"mapbox:\/\/...\")!)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Please consult the "},{"isActive":true,"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyle","type":"reference"},{"type":"text","text":" documentation to find more information about style loading."}],"type":"paragraph"},{"level":3,"text":"Declarative Map Styling","type":"heading","anchor":"Declarative-Map-Styling"},{"inlineContent":[{"type":"text","text":"With the advent of Declarative Map Styling, itâ€™s now feasible to reuse "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyleContent","isActive":true},{"text":" components within SwiftUI, offering a robust and exhaustive method to delineate map content comprehensively in one place.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example illustrates the utilization of both "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyleContent","type":"reference","isActive":true},{"text":", which can also be utilized outside of SwiftUI, and SwiftUI-specific ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapContent","type":"reference","isActive":true},{"type":"text","text":" within a singular declarative "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map","isActive":true},{"text":" description:","type":"text"}]},{"code":["Map(initialViewport: .camera(center: .init(latitude: 27.2, longitude: -26.9), zoom: 1.53, bearing: 0, pitch: 0)) {","    MapViewAnnotation(coordinate: .apple) {","        Circle()","            .fill(.purple)","            .frame(width: 40, height: 40)","    }","","     PolygonAnnotation(polygon: Polygon(center: .apple, radius: 8 * 100, vertices: 60))","        .fillColor(StyleColor(.yellow))","","","    GeoJSONSource(id: \"source\")","        .data(.geometry(.polygon(Polygon(center: .apple, radius: 4 * 100, vertices: 60))))","","    FillLayer(id: \"fill-id\", source: \"source\")","        .fillColor(.green)","        .fillOpacity(0.7)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Within SwiftUI, all ","type":"text"},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyleContent","isActive":true},{"text":" elements will be retained during style reloads and appropriately re-added. This ensures that the sole source of truth for map content lies within the declaration itself. SwiftUIâ€™s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapContent"},{"text":" serves as an extension of the Declarative Map Styling approach previously introduced for the UIKit API. Therefore, itâ€™s advisable to peruse the ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Declarative-Map-Styling","isActive":true,"type":"reference"},{"text":" guide to become acquainted with the underlying concepts of this declarative styling paradigm.","type":"text"}]},{"anchor":"Using-Viewport-to-manage-camera","level":3,"type":"heading","text":"Using Viewport to manage camera"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport"},{"type":"text","text":" is a powerful abstraction that manages the camera in SwiftUI. It supports multiple modes, such as "},{"code":"camera","type":"codeVoice"},{"text":", ","type":"text"},{"code":"overview","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"followPuck"},{"text":", and others.","type":"text"}]},{"inlineContent":[{"text":"For example, with ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/camera(center:anchor:zoom:bearing:pitch:)","type":"reference","isActive":true},{"type":"text","text":" you can set the camera parameters directly to the map."}],"type":"paragraph"},{"syntax":"swift","code":["let london = CLLocationCoordinate2D(latitude: 51.5073219, longitude: -0.1276474)","\/\/ Sets camera centered to London","Map(initialViewport: .camera(center: london, zoom: 12, bearing: 0, pitch: 0)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"initialViewport"},{"type":"text","text":" in the example above means that viewport will be set only on map initialization. If the user drags the map, it wonâ€™t be possible to set the viewport again. In contrast, the example below uses "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" variable via two-way data binding. With this approach, the viewport can be set and re-set whenever necessary. The approach you should use depends on your particular use case."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    \/\/ Initializes viewport state as styleDefault,","    \/\/ which will use the default camera for the current style.","    @State var viewport: Viewport = .styleDefault","","    var body: some View {","        VStack {","            \/\/ Passes the viewport binding to the map.","            Map(viewport: $viewport)","            Button(\"Overview route\") {","                \/\/ Sets the viewport to overview (fit) the route, or any other geometry.","                viewport = .overview(geometry: LineString(...))","            }","            Button(\"Locate the user\") {","                \/\/ Sets viewport to follow the user location.","                viewport = .followPuck(zoom: 16, pitch: 60)","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"When the user drags the map, the viewport always resets to ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/idle","type":"reference","isActive":true},{"type":"text","text":" state. You canâ€™t read the actual current camera state from that viewport, but you can observe it via "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map\/onCameraChanged(action:)","isActive":true},{"type":"text","text":"."}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Itâ€™s not recommended to store the camera values received from "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map\/onCameraChanged(action:)","isActive":true,"type":"reference"},{"type":"text","text":" in "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" property. They come with high frequency, which may lead to unwanted "},{"code":"body","type":"codeVoice"},{"text":" re-execution and high CPU consumption. Itâ€™s better to store them in model, or throttle before setting them to @State.","type":"text"}]}],"name":"Important"},{"type":"heading","level":3,"anchor":"Viewport-animations","text":"Viewport animations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The viewport changes can be animated using the "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/withViewportAnimation(_:body:completion:)","isActive":true},{"type":"text","text":" function."}]},{"code":["struct ContentView: View {","    @State var viewport: Viewport = .styleDefault","","","    var body: some View {","        VStack {","            Map(viewport: $viewport)","            Button(\"Animate viewport\") {","                \/\/ Changes viewport with default animation","                withViewportAnimation {","                    viewport = .followPuck","                }","            }","            Button(\"Animate viewport (ease-in)\") {","                \/\/ Changes viewport with ease-in animation","                withViewportAnimation(.easeIn(duration: 1)) {","                    viewport = .followPuck","                }","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Please consult the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ViewportAnimation","type":"reference"},{"type":"text","text":" documentation to learn more about supported animations."}]},{"style":"important","content":[{"inlineContent":[{"type":"text","text":"Itâ€™s recommended to use "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ViewportAnimation\/default(maxDuration:)","isActive":true},{"text":" animation when transition to ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/followPuck(zoom:bearing:pitch:)","type":"reference","isActive":true},{"text":" state. With other animation types, there might be a jump when animation finishes. It may happen because theyâ€™re designed to finish at the static target.","type":"text"}],"type":"paragraph"}],"name":"Important","type":"aside"},{"type":"heading","anchor":"Annotations","level":3,"text":"Annotations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two kinds of annotations in Maps SDK - View Annotations ("},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapViewAnnotation","type":"reference","isActive":true},{"text":") and Layer Annotations (a.k.a ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotation","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/CircleAnnotation","type":"reference","isActive":true},{"type":"text","text":", etc)."}]},{"text":"View Annotations","anchor":"View-Annotations","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"text":"View annotation allow you to display any SwiftUI view on top of the map. They give you endless possibility for customization, but may be less performant. Also, they are always displayed above all map content, you cannot place them in between map layers.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below displays multiple view annotations."}]},{"code":["struct ContentView: View {","    struct Item: Identifiable {...}","    @state var items = [Item]()","","    var body: some View {","        Map {","            \/\/ Displays a single view annotation at specified coordinate.","            MapViewAnnotation(coordinate: CLLocationCoordinate(...))","                Text(\"ðŸš€\")","                    .frame(width: 20, height: 20)","                    .background(Circle().fill(.red))","            }","","            \/\/ Displays multiple data-driven view annotations.","            ForEvery(items) { item in","                MapViewAnnotation(coordinate: item.coordinate) {","                    ItemContentView(item)","                }","            }","","            \/\/ Displays annotation on the layer feature.","            \/\/ The annotation will be dynamically positioned along the route line","            \/\/ that is displayed by \"route\" layer.","            MapViewAnnotation(layerId: \"route\") {","                ETAView(text: \"55 min\")","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ForEvery"},{"type":"text","text":" in the above example is similar to "},{"code":"ForEach","type":"codeVoice"},{"text":" in SwiftUI, but works with Map content.","type":"text"}]}],"style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"All View annotations may be configured via modifier functions (see "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapViewAnnotation","type":"reference","isActive":true},{"type":"text","text":" for the full list):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["MapViewAnnotation(coordinate: CLLocationCoordinate(...))","    Text(\"ðŸš€\")","        .frame(width: 20, height: 20)","        .background(Circle().fill(.red))","}",".allowOverlap(true) \/\/ will overlap with outer annotations",".variableAnchors([","    ViewAnnotationAnchorConfig(anchor: .bottom) \/\/ Anchor will be at the bottom","])"]},{"type":"heading","text":"Layer Annotations","level":4,"anchor":"Layer-Annotations"},{"type":"paragraph","inlineContent":[{"text":"Layer annotations are rendered natively in the map using layers. They can be placed in between map layers, support clustering (for ","type":"text"},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotation","isActive":true},{"text":"s only) and are usually more performant.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The example below displays different types of layer annotations.","type":"text"}]},{"code":["struct ContentView: View {","    struct Item {...}","    @state var items = [Item]()","","    var body: some View {","        Map {","            \/\/\/ Displays a polygon annotation","            let polygon = Polygon(...)","            PolygonAnnotation(polygon: polygon)","                .fillColor(StyleColor(.systemBlue))","                .fillOpacity(0.5)","                .fillOutlineColor(StyleColor(.black))","                .onTapGesture {","                    print(\"Polygon is tapped\")","                }","","            \/\/\/ Displays a single point annotation","            PointAnnotation(...)","","            \/\/\/ Displays data-driven group of point annotations.","            PointAnnotationGroup(items, id: \\.id) { item in","                PointAnnotation(coordinate: item.coordinate)","                    .image(named: \"dest-pin\")","                    .iconAnchor(.bottom)","            }","            .clusterOptions(ClusterOptions(...))","        }","    }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In example above you can see that ","type":"text"},{"code":"PointAnnotation","type":"codeVoice"},{"text":" (and other types of layer annotations) can be placed alone, or by using an annotation group, such as ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotationGroup","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The first method is a handy way to place only one annotation of its kind. The second is better for multiple annotations and gives more configuration options such as clustering, layer position, and more. Annotation groups also behave like ","type":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ForEvery","isActive":true,"type":"reference"},{"text":" for layer annotations.","type":"text"}],"type":"paragraph"},{"text":"Displaying user position","level":3,"anchor":"Displaying-user-position","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Puck allows you to display the user position on the map. The puck can be 2D or 3D."}]},{"inlineContent":[{"type":"text","text":"The example below displays the user position using 2D puck."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Map {","    Puck2D(bearing: .heading)","        .showsAccuracyRing(true)","}"]},{"type":"paragraph","inlineContent":[{"text":"The example below displays the user position using custom 3D model.","type":"text"}]},{"code":["Map {","    let duck = Model(","        uri: URL(string: \"https:\/\/raw.githubusercontent.com\/KhronosGroup\/glTF-Sample-Models\/master\/2.0\/Duck\/glTF-Embedded\/Duck.gltf\")!,","        orientation: [0, 0, -90])","    Puck3D(model: duck, bearing: .heading)","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If you add multiple pucks into one map, only the last one will be displayed."}],"type":"paragraph"}],"style":"note"},{"type":"heading","level":3,"anchor":"Direct-access-to-the-underlying-map-implementation","text":"Direct access to the underlying map implementation."},{"inlineContent":[{"type":"text","text":"If some API is not yet exposed in SwiftUI, you can use "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapReader","isActive":true,"type":"reference"},{"text":" to access the underlying map implementation.","type":"text"}],"type":"paragraph"},{"code":["var body: some View {","    MapReader { proxy in","        Map()","            .onAppear {","                configureUnderlyingMap(proxy.map)","            }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"We welcome your feedback on this experimental SwiftUI support. If you have any questions or comments please open an "},{"identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/issues","type":"reference","isActive":true},{"type":"text","text":" and add the "},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":" label."}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map-Content-Gestures-User-Guide"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mapboxmaps\/swiftui-user-guide"]}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/MapboxMaps\/documentation\/MapboxMaps","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/SwiftUI"]]},"references":{"doc://MapboxMaps/documentation/MapboxMaps/Viewport":{"navigatorTitle":[{"kind":"identifier","text":"Viewport"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Viewport","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"text":"Viewport represents the ways to position camera.","type":"text"}],"url":"\/documentation\/mapboxmaps\/viewport","title":"Viewport"},"doc://MapboxMaps/documentation/MapboxMaps/MapStyle":{"navigatorTitle":[{"text":"MapStyle","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MapStyle"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyle","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"text":"Map style configuration.","type":"text"}],"url":"\/documentation\/mapboxmaps\/mapstyle","title":"MapStyle"},"doc://MapboxMaps/documentation/MapboxMaps/PointAnnotationGroup":{"tags":[{"type":"spi","text":"SPI"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotationGroup","title":"PointAnnotationGroup","abstract":[{"type":"text","text":"Displays a group of "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotation","isActive":true,"type":"reference"},{"type":"text","text":"s."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PointAnnotationGroup","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PointAnnotationGroup"}],"role":"symbol","url":"\/documentation\/mapboxmaps\/pointannotationgroup","kind":"symbol"},"https://github.com/mapbox/mapbox-maps-ios/tree/main/Apps/Examples/Examples/SwiftUI%20Examples":{"title":"SwiftUI examples","titleInlineContent":[{"text":"SwiftUI examples","type":"text"}],"url":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples\/Examples\/SwiftUI%20Examples","identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples\/Examples\/SwiftUI%20Examples","type":"link"},"doc://MapboxMaps/documentation/MapboxMaps/Map-Content-Gestures-User-Guide":{"type":"topic","title":"Map Content Gestures User Guide","role":"article","url":"\/documentation\/mapboxmaps\/map-content-gestures-user-guide","kind":"article","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map-Content-Gestures-User-Guide","abstract":[{"type":"text","text":"Handle Tap and Long Press gestures on Map, Annotations, and Layers."}]},"doc://MapboxMaps/documentation/MapboxMaps/PointAnnotation":{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/PointAnnotation","title":"PointAnnotation","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PointAnnotation"}],"navigatorTitle":[{"kind":"identifier","text":"PointAnnotation"}],"role":"symbol","url":"\/documentation\/mapboxmaps\/pointannotation","kind":"symbol"},"doc://MapboxMaps/documentation/MapboxMaps/Viewport/followPuck(zoom:bearing:pitch:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"followPuck","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"zoom"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:14CoreFoundation7CGFloatV"},{"kind":"text","text":", "},{"text":"bearing","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FollowPuckViewportStateBearing","preciseIdentifier":"s:10MapboxMaps30FollowPuckViewportStateBearingO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"pitch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:14CoreFoundation7CGFloatV"},{"text":") -> ","kind":"text"},{"text":"Viewport","kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps8ViewportV"}],"role":"symbol","url":"\/documentation\/mapboxmaps\/viewport\/followpuck(zoom:bearing:pitch:)","type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/followPuck(zoom:bearing:pitch:)","abstract":[{"text":"Configures camera to follow the user location indicator.","type":"text"}],"kind":"symbol","tags":[{"text":"SPI","type":"spi"}],"title":"followPuck(zoom:bearing:pitch:)"},"doc://MapboxMaps/documentation/MapboxMaps/MapStyle/standard":{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyle\/standard","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"standard"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10MapboxMaps8MapStyleV","text":"MapStyle","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/mapboxmaps\/mapstyle\/standard","tags":[{"text":"SPI","type":"spi"}],"title":"standard","abstract":[{"type":"reference","identifier":"https:\/\/www.mapbox.com\/blog\/standard-core-style","isActive":true},{"text":" is a general-purpose style with 3D visualization.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://MapboxMaps/documentation/MapboxMaps/MapViewAnnotation":{"navigatorTitle":[{"text":"MapViewAnnotation","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MapViewAnnotation","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapViewAnnotation","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"type":"text","text":"Displays a view annotation."}],"url":"\/documentation\/mapboxmaps\/mapviewannotation","title":"MapViewAnnotation"},"https://github.com/mapbox/mapbox-maps-ios/tree/main/Apps/Examples":{"title":"Examples","titleInlineContent":[{"text":"Examples","type":"text"}],"url":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples","identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/tree\/main\/Apps\/Examples","type":"link"},"doc://MapboxMaps/documentation/MapboxMaps":{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps","title":"MapboxMaps","abstract":[{"type":"text","text":"Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal."}],"type":"topic","role":"collection","url":"\/documentation\/mapboxmaps","kind":"symbol"},"doc://MapboxMaps/documentation/MapboxMaps/withViewportAnimation(_:body:completion:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withViewportAnimation","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps17ViewportAnimationV","text":"ViewportAnimation"},{"kind":"text","text":", "},{"text":"body","kind":"externalParam"},{"kind":"text","text":": () "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps21withViewportAnimation_4body10completionxAA0dE0V_xyKXEySbcSgtKlF6ResultL_xmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": (("},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:10MapboxMaps21withViewportAnimation_4body10completionxAA0dE0V_xyKXEySbcSgtKlF6ResultL_xmfp"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/withViewportAnimation(_:body:completion:)","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"type":"text","text":"Applies the animation to the map viewport."}],"url":"\/documentation\/mapboxmaps\/withviewportanimation(_:body:completion:)","title":"withViewportAnimation(_:body:completion:)"},"doc://MapboxMaps/documentation/MapboxMaps/Viewport/idle":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"idle"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10MapboxMaps8ViewportV","text":"Viewport","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"text":"Idle viewport represents the state when user freely drags the map.","type":"text"}],"type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/idle","url":"\/documentation\/mapboxmaps\/viewport\/idle","kind":"symbol","tags":[{"type":"spi","text":"SPI"}],"title":"idle"},"doc://MapboxMaps/documentation/MapboxMaps/Map/mapStyle(_:)":{"type":"topic","title":"mapStyle(_:)","role":"symbol","url":"\/documentation\/mapboxmaps\/map\/mapstyle(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mapStyle"},{"text":"(","kind":"text"},{"text":"MapStyle","preciseIdentifier":"s:10MapboxMaps8MapStyleV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps3MapV","text":"Map"}],"tags":[{"type":"spi","text":"SPI"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map\/mapStyle(_:)","abstract":[{"type":"text","text":"Sets style to the map."}]},"doc://MapboxMaps/documentation/MapboxMaps/Map":{"role":"symbol","title":"Map","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map","abstract":[{"text":"A SwiftUI view that displays a Mapbox Map.","type":"text"}],"type":"topic","url":"\/documentation\/mapboxmaps\/map","tags":[{"type":"spi","text":"SPI"}],"navigatorTitle":[{"kind":"identifier","text":"Map"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Map","kind":"identifier"}]},"doc://MapboxMaps/documentation/MapboxMaps/ViewportAnimation":{"navigatorTitle":[{"text":"ViewportAnimation","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewportAnimation"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ViewportAnimation","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"text":"Specifies the animation for the map ","type":"text"},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport","isActive":true},{"text":".","type":"text"}],"url":"\/documentation\/mapboxmaps\/viewportanimation","title":"ViewportAnimation"},"doc://MapboxMaps/documentation/MapboxMaps/Migrate-to-v11#26-Access-Token-and-Map-Options-management":{"type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Migrate-to-v11#26-Access-Token-and-Map-Options-management","url":"\/documentation\/mapboxmaps\/migrate-to-v11#26-Access-Token-and-Map-Options-management","title":"2.6 Access Token and Map Options management","abstract":[],"kind":"section"},"doc://MapboxMaps/documentation/MapboxMaps/MapContent":{"navigatorTitle":[{"text":"MapContent","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MapContent"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapContent","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"type":"text","text":"A protocol used to create any type of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map"},{"type":"text","text":" content, such as annotations, location indicator, layers, sources, lights, and more."}],"url":"\/documentation\/mapboxmaps\/mapcontent","title":"MapContent"},"doc://MapboxMaps/documentation/MapboxMaps/MapStyleContent":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MapStyleContent"}],"url":"\/documentation\/mapboxmaps\/mapstylecontent","title":"MapStyleContent","role":"symbol","tags":[{"type":"spi","text":"SPI"}],"kind":"symbol","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapStyleContent","type":"topic","abstract":[{"text":"A protocol used to create any type of  map style content, such as layers, sources, lighting and others.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MapStyleContent"}]},"doc://MapboxMaps/documentation/MapboxMaps/ViewportAnimation/default(maxDuration:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`default`"},{"text":"(","kind":"text"},{"text":"maxDuration","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TimeInterval","kind":"typeIdentifier","preciseIdentifier":"c:@T@NSTimeInterval"},{"kind":"text","text":") -> "},{"text":"ViewportAnimation","preciseIdentifier":"s:10MapboxMaps17ViewportAnimationV","kind":"typeIdentifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ViewportAnimation\/default(maxDuration:)","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"type":"text","text":"A default animation with the specified maximum duration."}],"url":"\/documentation\/mapboxmaps\/viewportanimation\/default(maxduration:)","title":"default(maxDuration:)"},"doc://MapboxMaps/documentation/MapboxMaps/Declarative-Map-Styling":{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Declarative-Map-Styling","kind":"article","role":"article","type":"topic","abstract":[{"text":"Simplify runtime style manipulation with declarative syntax.","type":"text"}],"url":"\/documentation\/mapboxmaps\/declarative-map-styling","title":"Declarative Map Styling"},"https://github.com/mapbox/mapbox-maps-ios/issues":{"title":"issue in the Mapbox Maps SDK repo","titleInlineContent":[{"text":"issue in the Mapbox Maps SDK repo","type":"text"}],"url":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/issues","identifier":"https:\/\/github.com\/mapbox\/mapbox-maps-ios\/issues","type":"link"},"doc://MapboxMaps/documentation/MapboxMaps/MapView":{"navigatorTitle":[{"text":"MapView","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MapView"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapView","kind":"symbol","role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/mapboxmaps\/mapview","title":"MapView"},"doc://MapboxMaps/documentation/MapboxMaps/SwiftUI":{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/SwiftUI","title":"SwiftUI","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/mapboxmaps\/swiftui","kind":"article"},"doc://MapboxMaps/documentation/MapboxMaps/Viewport/camera(center:anchor:zoom:bearing:pitch:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"camera","kind":"identifier"},{"text":"(","kind":"text"},{"text":"center","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@S@CLLocationCoordinate2D","kind":"typeIdentifier","text":"CLLocationCoordinate2D"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"anchor"},{"kind":"text","text":": "},{"text":"CGPoint","kind":"typeIdentifier","preciseIdentifier":"c:@S@CGPoint"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"zoom"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14CoreFoundation7CGFloatV","text":"CGFloat"},{"text":"?, ","kind":"text"},{"text":"bearing","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"c:@T@CLLocationDirection","text":"CLLocationDirection","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"pitch","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CGFloat","kind":"typeIdentifier","preciseIdentifier":"s:14CoreFoundation7CGFloatV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Viewport","preciseIdentifier":"s:10MapboxMaps8ViewportV"}],"role":"symbol","url":"\/documentation\/mapboxmaps\/viewport\/camera(center:anchor:zoom:bearing:pitch:)","type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Viewport\/camera(center:anchor:zoom:bearing:pitch:)","abstract":[{"type":"text","text":"Manually sets camera to specified properties."}],"kind":"symbol","tags":[{"text":"SPI","type":"spi"}],"title":"camera(center:anchor:zoom:bearing:pitch:)"},"https://www.mapbox.com/blog/standard-core-style":{"type":"link","identifier":"https:\/\/www.mapbox.com\/blog\/standard-core-style","url":"https:\/\/www.mapbox.com\/blog\/standard-core-style","titleInlineContent":[{"text":"Mapbox Standard","type":"text"}],"title":"Mapbox Standard"},"https://studio.mapbox.com/":{"title":"Mapbox Studio","titleInlineContent":[{"text":"Mapbox Studio","type":"text"}],"url":"https:\/\/studio.mapbox.com\/","identifier":"https:\/\/studio.mapbox.com\/","type":"link"},"doc://MapboxMaps/documentation/MapboxMaps/CircleAnnotation":{"navigatorTitle":[{"kind":"identifier","text":"CircleAnnotation"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CircleAnnotation","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/CircleAnnotation","kind":"symbol","role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/mapboxmaps\/circleannotation","title":"CircleAnnotation"},"doc://MapboxMaps/documentation/MapboxMaps/ForEvery":{"navigatorTitle":[{"kind":"identifier","text":"ForEvery"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ForEvery","kind":"identifier"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/ForEvery","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"text":"A structure that creates map content from an underlying collection of identified data.","type":"text"}],"url":"\/documentation\/mapboxmaps\/forevery","title":"ForEvery"},"doc://MapboxMaps/documentation/MapboxMaps/MapReader":{"navigatorTitle":[{"text":"MapReader","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MapReader"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapReader","kind":"symbol","role":"symbol","type":"topic","tags":[{"type":"spi","text":"SPI"}],"abstract":[{"type":"text","text":"Provides access to the underlying "},{"type":"reference","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/MapView","isActive":true},{"type":"text","text":" map via proxy."}],"url":"\/documentation\/mapboxmaps\/mapreader","title":"MapReader"},"doc://MapboxMaps/documentation/MapboxMaps/Map/onCameraChanged(action:)":{"type":"topic","title":"onCameraChanged(action:)","role":"symbol","url":"\/documentation\/mapboxmaps\/map\/oncamerachanged(action:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onCameraChanged"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"text":"CameraChanged","preciseIdentifier":"c:objc(cs)MBMCameraChanged","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"text":"Map","preciseIdentifier":"s:10MapboxMaps3MapV","kind":"typeIdentifier"}],"tags":[{"type":"spi","text":"SPI"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Map\/onCameraChanged(action:)","abstract":[{"type":"text","text":"Adds an action to perform when the camera is changed."}]}}}