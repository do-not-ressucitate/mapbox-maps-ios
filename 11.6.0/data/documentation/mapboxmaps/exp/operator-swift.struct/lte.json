{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"lte"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp","kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps3ExpV","text":"Exp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp\/Operator-swift.struct","preciseIdentifier":"s:10MapboxMaps3ExpV8OperatorV","text":"Operator"}],"languages":["swift"]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Returns "},{"code":"true","type":"codeVoice"},{"text":" if the first input is less than or equal to the second, ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional "},{"type":"codeVoice","code":"collator"},{"type":"text","text":" argument to control locale-dependent string comparisons."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mapboxmaps\/exp\/operator-swift.struct\/lte"]}],"metadata":{"symbolKind":"property","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lte","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10MapboxMaps3ExpV","text":"Exp","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Operator","preciseIdentifier":"s:10MapboxMaps3ExpV8OperatorV","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Type Property","externalID":"s:10MapboxMaps3ExpV8OperatorV3lteAEvpZ","title":"lte","modules":[{"name":"MapboxMaps"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/MapboxMaps\/documentation\/MapboxMaps","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp","doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp\/Operator-swift.struct"]]},"identifier":{"url":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp\/Operator-swift.struct\/lte","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://MapboxMaps/documentation/MapboxMaps/Exp":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Exp"}],"url":"\/documentation\/mapboxmaps\/exp","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp","type":"reference","isActive":true},{"type":"text","text":"(expression) defines a formula for computing the value of any layout property, paint property,"},{"type":"text","text":" "},{"type":"text","text":"or filter within a map style. Expressions allow you to style data with multiple feature"},{"text":" ","type":"text"},{"text":"properties at once, apply conditional logic, and manipulate data with mathematical, logical, and","type":"text"},{"type":"text","text":" "},{"text":"string operators. This allows for sophisticated runtime styling.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Exp"}],"identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp","title":"Exp"},"doc://MapboxMaps/documentation/MapboxMaps/Expressions":{"title":"Expressions","kind":"article","type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Expressions","abstract":[],"role":"collectionGroup","url":"\/documentation\/mapboxmaps\/expressions"},"doc://MapboxMaps/documentation/MapboxMaps/Exp/Operator-swift.struct/lte":{"kind":"symbol","url":"\/documentation\/mapboxmaps\/exp\/operator-swift.struct\/lte","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the first input is less than or equal to the second, ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional "},{"type":"codeVoice","code":"collator"},{"type":"text","text":" argument to control locale-dependent string comparisons."}],"type":"topic","role":"symbol","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp\/Operator-swift.struct\/lte","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lte","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exp","kind":"typeIdentifier","preciseIdentifier":"s:10MapboxMaps3ExpV"},{"kind":"text","text":"."},{"text":"Operator","preciseIdentifier":"s:10MapboxMaps3ExpV8OperatorV","kind":"typeIdentifier"}],"title":"lte"},"doc://MapboxMaps/documentation/MapboxMaps/Exp/Operator-swift.struct":{"navigatorTitle":[{"text":"Operator","kind":"identifier"}],"title":"Exp.Operator","kind":"symbol","type":"topic","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps\/Exp\/Operator-swift.struct","abstract":[],"role":"symbol","url":"\/documentation\/mapboxmaps\/exp\/operator-swift.struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Operator","kind":"identifier"}]},"doc://MapboxMaps/documentation/MapboxMaps":{"type":"topic","kind":"symbol","abstract":[{"text":"Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal.","type":"text"}],"role":"collection","identifier":"doc:\/\/MapboxMaps\/documentation\/MapboxMaps","title":"MapboxMaps","url":"\/documentation\/mapboxmaps"}}}